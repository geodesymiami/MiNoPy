# vim: set filetype=cfg:
##------------------------ minopyApp.cfg ------------------------##

########## text before script calls
minopy.textCmd                        = auto    # [eg: source ~/.bashrc]

########## parallel job setting
minopy.multiprocessing.numProcessor              = auto    # auto for 4

########## 1. load data given the area of interest
## auto - automatic path pattern for Univ of Miami file structure
## crop_image.py -h to check more details and example inputs.
## directories are to read from and the subsets will be saved under minopy directory
## compression to save disk usage for ifgramStack.h5 file:
## no   - save   0% disk usage, fast [default]
## lzf  - save ~57% disk usage, relative slow
## gzip - save ~62% disk usage, very slow [not recommend]

minopy.load.processor      = auto  #[isce,snap,gamma,roipac], auto for isceTops
minopy.load.updateMode     = auto  #[yes / no], auto for yes, skip re-loading if HDF5 files are complete
minopy.load.compression    = auto  #[gzip / lzf / no], auto for no.
minopy.load.autoPath       = auto    # [yes, no] auto for no
##---------Coregistered SLC images:
minopy.load.slcFile        = auto  #[path2slc_file]
minopy.load.startDate      = auto  #auto for first date
minopy.load.endDate        = auto  #auto for last date
##---------for ISCE only:
minopy.load.metaFile       = auto  #[path2metadata_file], i.e.: ./reference/IW1.xml, ./referenceShelve/data.dat
minopy.load.baselineDir    = auto  #[path2baseline_dir], i.e.: ./baselines
##---------geometry datasets:
minopy.load.demFile        = auto  #[path2hgt_file]
minopy.load.lookupYFile    = auto  #[path2lat_file], not required for geocoded data
minopy.load.lookupXFile    = auto  #[path2lon_file], not required for geocoded data
minopy.load.incAngleFile   = auto  #[path2los_file], optional
minopy.load.azAngleFile    = auto  #[path2los_file], optional
minopy.load.shadowMaskFile = auto  #[path2shadow_file], optional
minopy.load.waterMaskFile  = auto  #[path2water_mask_file], optional
minopy.load.bperpFile      = auto  #[path2bperp_file], optional
##---------interferogram datasets:
minopy.load.unwFile        = auto  #[path2unw_file]
minopy.load.corFile        = auto  #[path2cor_file]
minopy.load.connCompFile   = auto  #[path2conn_file], optional
minopy.load.intFile        = auto  #[path2int_file], optional
minopy.load.ionoFile       = auto  #[path2iono_file], optional
##---------subset (optional):
## if both yx and lalo are specified, use lalo option unless a) no lookup file AND b) dataset is in radar coord
minopy.subset.yx           = auto    #[y0:y1,x0:x1 / no], auto for no
minopy.subset.lalo         = auto    #[S:N,W:E / no], auto for no

########## 2,3. Perform patch wise phase linking and concatenate patches
## window sizes are used in step 2, 3,
minopy.inversion.patchSize                = auto   # patch size (n*n) to divide the image for parallel processing, auto for 200
minopy.inversion.ministackSize            = auto   # number of images in each ministack, auto for 10
minopy.inversion.rangeWindow              = auto   # range window size for searching SHPs, auto for 15
minopy.inversion.azimuthWindow            = auto   # azimuth window size for searching SHPs, auto for 15
minopy.inversion.shpTest                  = auto   # [ks, ad, ttest] auto for ks: kolmogorov-smirnov test
minopy.inversion.phaseLinkingMethod       = auto   # [EVD, EMI, PTA, sequential_EVD, sequential_EMI, sequential_PTA, StBAS], auto for sequential_EMI
minopy.inversion.stbas_numCon             = auto   # auto for 10, number of consecutive interferograms
minopy.inversion.PsNumShp                 = auto   # auto for 10, number of shps for ps candidates
minopy.inversion.mask                     = auto   # mask file for phase inversion, auto for None

########## 4. Select the network and generate interferograms
## Different pairs of interferograms can be choosed for unwrapping.
## Following is a short description of each type and the MintPy unwrapping error correction that is valid for them
## 1. mini_stacks: It unwraps single reference interferograms in each ministack. Only bridging for unwrap error correction
## 2. single_reference: It unwraps the single reference interferograms of the whole stack using referenceDate. Only bridging for unwrap error correction
## 3. delaunay: delaunay triangles with temporal and spatial baseline threshold. Both bridging and phase_closure can be used.
## 4. sequential: sequential interferograms,  Bridging can be used, phase_closure only if fully connected
## You may also unwrap certain combination of pairs by giving them in a text file as minopy.interferograms.list
minopy.interferograms.type                    = auto     # [mini_stacks, single_reference, sequential, delaunay] default: single_reference
minopy.interferograms.list                    = auto     # auto for None, list of interferograms to unwrap in a text file
minopy.interferograms.referenceDate           = auto     # auto for the middle image
minopy.interferograms.filterStrength          = auto     # [0-1], interferogram smoothing factor, auto for 0
minopy.interferograms.ministackRefMonth       = auto     # The month of the year that coherence is high to choose reference from, default: 6
minopy.interferograms.numSequential           = auto     # Number of sequential interferograms, auto for 3
minopy.interferograms.delaunayBaselineRatio   = auto     # [1, 4, 9] Ratio between perpendiclar and temporal baselines, auto for 1
minopy.interferograms.delaunayTempThresh      = auto     # [days] temporal threshold for delaunay triangles, auto for 120
minopy.interferograms.delaunayPerpThresh      = auto     # [meters] Perp baseline threshold for delaunay triangles, auto for 200
minopy.interferograms.oneYear                 = auto     # [yes, no ] Add one year interferograms, auto for no

########## 5. Unwrap interferograms
minopy.unwrap.two-stage                  = auto     # [yes, no], auto for yes, Do two stage unwrapping
minopy.unwrap.removeFilter               = auto     # [yes, no], auto for yes, remove filter after unwrap
minopy.unwrap.snaphu.maxDiscontinuity    = auto     # (snaphu parameter) max phase discontinuity in cycle, auto for 1.2
minopy.unwrap.snaphu.initMethod          = auto     # [MCF, MST] auto for MCF
minopy.unwrap.mask                       = auto     # auto for None

########## 6,7. Load interferograms
# Set options in mintpy config file

########## 8. Invert network of interferograms to timeseries
minopy.timeseries.tempCohType            = auto     # [full, average], auto for full.
minopy.timeseries.minTempCoh             = auto     # auto for 0.5
minopy.timeseries.waterMask              = auto     # auto for None, path to water mask
minopy.timeseries.shadowMask             = auto     # [yes, no] auto for no, using shadow mask to mask final results
minopy.timeseries.residualNorm           = auto     # [L1, L2], auto for L2, norm minimization solution
minopy.timeseries.L1smoothingFactor      = auto     # [0-1] auto for 0.01
minopy.timeseries.L2weightFunc           = auto     # [var / fim / coh / no], auto for var
minopy.timeseries.minNormVelocity        = auto     # [yes / no], auto for yes, min-norm deformation velocity / phase

########## 9. Timeseries Correction
# Set options in mintpy config file

